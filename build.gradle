buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url "https://repo.spongepowered.org/repository/maven-public/" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'


version = "${mod_version}"
group = "${mod_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_name}-${minecraft_version}"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: "${minecraft_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        if (findProject(':Workspace') == null) {
            client {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
                property 'forge.logging.console.level', 'debug'

                mods {
                    chatembeds {
                        source sourceSets.main
                    }
                }
            }

            server {
                workingDirectory project.file('run')

                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
                property 'forge.logging.console.level', 'debug'

                mods {
                    chatembeds {
                        source sourceSets.main
                    }
                }
            }
        }

        data {
            workingDirectory project.file('run')

            if (findProject(':Workspace') != null) {
                ideaModule '1.16.ChatEmbeds.main'
            }

            args '--mod', 'chatembeds', '--all', '--output', file('src/main/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                chatembeds {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.0'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation "org.jsoup:jsoup:${jsoup_version}"
}

def toml_properties = [
        'version': project.version,
        'minecraft_version': minecraft_version,
        'forge_version': forge_version,
        'loader_version': forge_version.tokenize('.').get(0)
]

processResources {

    inputs.property 'version', project.version
    inputs.property 'minecraft_version', minecraft_version
    inputs.property 'forge_version', forge_version

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        expand toml_properties
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

mixin {
    add sourceSets.main, 'mixins.chatembeds.refmap.json'
    defaultObfuscationEnv 'searge'
}

// Example for how to get properties into the manifest for reading at runtime.
shadowJar {
    dependencies {
        include dependency("org.jsoup:jsoup:${jsoup_version}")
    }

    exclude('META-INF/maven/**')
    exclude('META-INF/CHANGES')
    exclude('META-INF/LICENSE')
    exclude('META-INF/README.md')

    manifest {
        attributes([
                "Specification-Title": "${mod_name}",
                "Specification-Vendor": "Yunus1903",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" : "Yunus1903",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "chatembeds.mixins.json"
        ])
    }
}

reobf {
    shadowJar { }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest {
        attributes([
                "Specification-Title": "${mod_name}",
                "Specification-Vendor": "Yunus1903",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" : "Yunus1903",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "chatembeds.mixins.json"
        ])
    }
}

artifacts {
    archives shadowJar
    archives sourcesJar
}

tasks.build.dependsOn reobfShadowJar

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
